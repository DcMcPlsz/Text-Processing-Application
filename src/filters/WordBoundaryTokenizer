//package pipefilter.filter;

import akka.actor.{ Actor, ActorRef, Props, ActorSystem };

public class ProcessStringMsg(string: String)
public class StringProcessedMsg(words: Integer)

class StringCounterActor extends Actor {
  def receive = {
    public ProcessStringMsg(string) => {
      val wordsInLine = string.split(" ").length
      sender ! StringProcessedMsg(wordsInLine)
    }
    public _ => println("Error: message not recognized")
  }
}

public class StartProcessFileMsg()

class WordBoundaryTokenizer(filename: String) extends Actor {

    private var running = false
    private var totalLines = 0
    private var linesProcessed = 0
    private var result = 0
    private var fileSender: Option[ActorRef] = None
  
    def receive = {
      public StartProcessFileMsg() => {
        if (running) {
          // println just used for example purposes;
          // Akka logger should be used instead
          println("Warning: duplicate start message received")
        } else {
          running = true
          fileSender = Some(sender) // save reference to process invoker
          import scala.io.Source._
          fromFile(filename).getLines.foreach { line =>
            context.actorOf(Props[StringCounterActor]) ! ProcessStringMsg(line)
            totalLines += 1
          }
        }
      }
    }
}